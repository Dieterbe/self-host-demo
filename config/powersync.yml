# powersync.yaml
# Very similar to the config on Collide, but a little more low-level
replication:
  connections:
    - type: postgresql
      sslmode: disable # okay for local/private network, not for public network

      # The PowerSync server container can access the Postgres DB via the DB's service name.
      # In this case the hostname is pg-db

      # The connection URI or individual parameters can be specified.
      # Individual params take precedence over URI params

      #   TODO Match these params with Docker environment config if changed
      #   This will be improved in future with environment templates

      uri: postgres://postgres:mypassword@pg-db:5444/postgres

      # Or use individual params

      # hostname: pg-db # From the Docker Compose service name
      # port: 5444
      # database: postgres
      # username: postgres
      # password: mypassword

# This is valid if using the `mongo` service defined in `ps-mongo.yaml`
storage:
  type: mongodb
  uri: mongodb://mongo:27017/powersync_demo

# The port which the PowerSync API server will listen on
# TODO update the docker-compose file if changing this value
port: 8080

sync_rules:
  path: sync_rules.yml

# Client authentication settings
client_auth:
  # Enable this if using Supabase Auth
  # supabase: true

  # JWKS URIs can be specified here.
  # Note that only HTTPs is supported.
  jwks_uri: []
  jwks:
    keys:
      # Public key used to verify JWTs
      # This is the matching public key DEMO_JWKS_PUBLIC_KEY in the `.env` file
      # The demo backend generates JWTs using the private key.
      #   https://github.com/powersync-ja/powersync-nodejs-backend-todolist-demo/blob/5420b1a04dcb496a91a8528a523bd4ae75711bf8/src/api/auth.js#L15
      # The demo client app uses these JWTs to authenticate with the PowerSync service
      #  ./demo-app/src/library/powersync/DemoConnector.ts
      - kty: 'RSA'
        n: '9Ch5sDpArI3wgM_5sRKJIs8mZM7bgBtqlu_rdxHtXWtiP1C4Jh5hEifEupqCKMlUjGgKtf5sJfig--4RRgDQ_ScgEr2nxPSzKErW38vrw-ARumTJFonxCPDZ03HOZjUevd8TkPX-_t0izpG0rdtrgTs1AOZN0AYXTVA16sDUKcNqfVczvK46jo15sQRaOaFIWKUTqZJDHCY_YAk3dlFgfHvgqDU4DUoyo-_jYhDkzfFyBtdWXltx4SNiUhpA8mRMF0UkvO_Qmh9GIIGd_mvVt2s7V5jD1MyNEk5Uvz-mlqzkON348V_uHAC61HAqsWXGyZqryhH5gOJ2A5MOTS7JUw'
        e: 'AQAB'
        alg: 'RS256'
        kid: 'powersync-0e3d5354f2'

      # This optional key is used for demo development auth tokens
      # This key is used for signing JWTs.
      # This should be a private key.
      # The `kid` should match `powersync-dev`
      - kty: 'oct'
        kid: powersync-dev
        # Valid options are HS256, HS284 and HS512
        alg: 'HS256'
        k: 'GLLcVV0/vqWXXfgJbEI9T2FfGLK/r9lPgTZAa8J1aGM='

  audience: ['powersync-dev', 'powersync']

  # SSL settings
  # Defaults to verify-full
  # sslmode: 'verify-full' or 'verify-ca' or 'disable'

  # Required for verify-ca, optional for verify-full
  # cacert:

  # Include a certificate here for HTTPs
  # client_certificate:
  # client_private_key:

  # Expose "execute-sql"
  debug_api: true

dev:
  # Development settings
  # The PowerSync API server exposes a few dev routes which can make local development easier

  # Route: /dev/auth.json
  # Returns a development token
  # POST a JSON payload containing the user ID which should be included in the JWT
  # Include the `dev_password`` in the post request in order to authenticate for the development route
  # Example:
  # curl -X POST \
  #   -H "Content-Type: application/json" \
  #   -d '{
  #   "user": "cda67461-61c2-4553-825e-c9a33c6d2680",
  #   "password": "mysupersecuredevpassword"
  #   }' \
  #   http://localhost:8080/dev/auth.json

  demo_auth: true # Don't enable this in production
  demo_password: mysupersecuredevpassword

api:
  tokens:
    - dev
